local avatar = require "world.avatar"
local character = require "world.character"
local room_cell = require "world.room_cell"
local room      = require "world.room"
local room_cell_type = require "world.room_cell_type"
local grimoire       = require "game.grimoire"
local character_type = require "world.character_type"
local verb_type      = require "world.verb_type"
local direction = require "game.direction"
local interaction_type = require "world.interaction_type"

require "world.initializers.initializers"

function init(self)
	msg.post(".", "acquire_input_focus")
end

local function update_board()
	local avatar_character_id = avatar.get_character()
	local is_interacting = character.get_interaction(avatar_character_id) ~= nil
	local avatar_room_cell_id = character.get_room_cell(avatar_character_id)
	local avatar_room_id = room_cell.get_room(avatar_room_cell_id)
	local room_columns, room_rows = room.get_columns(avatar_room_id), room.get_rows(avatar_room_id)
	for column = 1, room_columns do
		for row = 1, room_rows do
			local room_cell_id = room.get_room_cell(avatar_room_id, column, row)
			local room_cell_type_id = room_cell.get_room_cell_type(room_cell_id)
			local tile = room_cell_type.get_tile(room_cell_type_id)
			tilemap.set_tile(grimoire.URL_SCENE_TILEMAP, grimoire.LAYER_ROOM_CELL, column, row, tile)

			tile = 0
			local character_id = room_cell.get_character(room_cell_id)
			if character_id ~= nil then
				local character_type_id = character.get_character_type(character_id)
				tile = character_type.get_tile(character_type_id)
			end
			tilemap.set_tile(grimoire.URL_SCENE_TILEMAP, grimoire.LAYER_CHARACTER, column, row, tile)

			tile = 0
			if is_interacting then
				tile = grimoire.TILE_DITHER
			end
			tilemap.set_tile(grimoire.URL_SCENE_TILEMAP, grimoire.LAYER_EFFECT, column, row, tile)
		end
	end
end

local function update_interactor()
	local avatar_character_id = avatar.get_character()
	local interaction = character.get_interaction(avatar_character_id)
	if interaction == nil then
		label.set_text(grimoire.URL_INTERACTOR_TEXT, "Up/Right/Left/Down: Move")
	else
		local dialog = avatar.get_dialog()
		assert(dialog ~= nil, "dialog should not be nil")
		local text = ""
		for _, line in ipairs(dialog.lines) do
			text = text .. line .. "\n"
		end
		text = text .. "---\n"
		for choice_index, choice in ipairs(dialog.choices) do
			if choice_index == avatar.get_dialog_choice() then
				text = text .. "["
			end
			text = text .. choice.text
			if choice_index == avatar.get_dialog_choice() then
				text = text .. "]"
			end
			text = text .. "\n"
		end
		text = text .. "\n\nUp/Down: Change Choice\nSpace: Make Choice"
		label.set_text(grimoire.URL_INTERACTOR_TEXT, text)
	end
end

function update(self, dt)
	update_board()
	update_interactor()
end

function on_message(self, message_id, message, sender)
end

local function move_avatar(direction_id)
	local character_id = avatar.get_character()
	if not character.has_interaction(character_id) then
		character.do_verb(character_id, verb_type.MOVE, { direction_id = direction_id})
	end
end

function on_input(self, action_id, action)
	if action.pressed or action.repeated then
		if action_id == hash(grimoire.ACTION_UP) then
			avatar.previous_dialog_choice()
			move_avatar(direction.UP)
		elseif action_id == hash(grimoire.ACTION_RIGHT) then
			move_avatar(direction.RIGHT)
		elseif action_id == hash(grimoire.ACTION_DOWN) then
			avatar.next_dialog_choice()
			move_avatar(direction.DOWN)
		elseif action_id == hash(grimoire.ACTION_LEFT) then
			move_avatar(direction.LEFT)
		elseif action_id == hash(grimoire.ACTION_GREEN) then
			avatar.confirm_dialog_choice()
		elseif action_id == hash(grimoire.ACTION_RED) then
			avatar.cancel_dialog_choice()
		else
			print(action_id)
		end
	end
end